// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.7.1
// source: NOKIA-dial-out-telemetry.proto

package Nokia_SROS

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	gnmi "github.com/openconfig/gnmi/proto/gnmi"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublishResponse) Reset() {
	*x = PublishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NOKIA_dial_out_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponse) ProtoMessage() {}

func (x *PublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_NOKIA_dial_out_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponse.ProtoReflect.Descriptor instead.
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return file_NOKIA_dial_out_telemetry_proto_rawDescGZIP(), []int{0}
}

var File_NOKIA_dial_out_telemetry_proto protoreflect.FileDescriptor

var file_NOKIA_dial_out_telemetry_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x4e, 0x4f, 0x4b, 0x49, 0x41, 0x2d, 0x64, 0x69, 0x61, 0x6c, 0x2d, 0x6f, 0x75, 0x74,
	0x2d, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x4e, 0x6f, 0x6b, 0x69, 0x61, 0x2e, 0x53, 0x52, 0x4f, 0x53, 0x1a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6e, 0x6d, 0x69, 0x2f, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11,
	0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x57, 0x0a, 0x10, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x75, 0x74, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x12, 0x17, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x1b, 0x2e, 0x4e, 0x6f, 0x6b, 0x69,
	0x61, 0x2e, 0x53, 0x52, 0x4f, 0x53, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_NOKIA_dial_out_telemetry_proto_rawDescOnce sync.Once
	file_NOKIA_dial_out_telemetry_proto_rawDescData = file_NOKIA_dial_out_telemetry_proto_rawDesc
)

func file_NOKIA_dial_out_telemetry_proto_rawDescGZIP() []byte {
	file_NOKIA_dial_out_telemetry_proto_rawDescOnce.Do(func() {
		file_NOKIA_dial_out_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_NOKIA_dial_out_telemetry_proto_rawDescData)
	})
	return file_NOKIA_dial_out_telemetry_proto_rawDescData
}

var file_NOKIA_dial_out_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_NOKIA_dial_out_telemetry_proto_goTypes = []interface{}{
	(*PublishResponse)(nil),        // 0: Nokia.SROS.PublishResponse
	(*gnmi.SubscribeResponse)(nil), // 1: gnmi.SubscribeResponse
}
var file_NOKIA_dial_out_telemetry_proto_depIdxs = []int32{
	1, // 0: Nokia.SROS.DialoutTelemetry.Publish:input_type -> gnmi.SubscribeResponse
	0, // 1: Nokia.SROS.DialoutTelemetry.Publish:output_type -> Nokia.SROS.PublishResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_NOKIA_dial_out_telemetry_proto_init() }
func file_NOKIA_dial_out_telemetry_proto_init() {
	if File_NOKIA_dial_out_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_NOKIA_dial_out_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_NOKIA_dial_out_telemetry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_NOKIA_dial_out_telemetry_proto_goTypes,
		DependencyIndexes: file_NOKIA_dial_out_telemetry_proto_depIdxs,
		MessageInfos:      file_NOKIA_dial_out_telemetry_proto_msgTypes,
	}.Build()
	File_NOKIA_dial_out_telemetry_proto = out.File
	file_NOKIA_dial_out_telemetry_proto_rawDesc = nil
	file_NOKIA_dial_out_telemetry_proto_goTypes = nil
	file_NOKIA_dial_out_telemetry_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DialoutTelemetryClient is the client API for DialoutTelemetry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DialoutTelemetryClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (DialoutTelemetry_PublishClient, error)
}

type dialoutTelemetryClient struct {
	cc grpc.ClientConnInterface
}

func NewDialoutTelemetryClient(cc grpc.ClientConnInterface) DialoutTelemetryClient {
	return &dialoutTelemetryClient{cc}
}

func (c *dialoutTelemetryClient) Publish(ctx context.Context, opts ...grpc.CallOption) (DialoutTelemetry_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DialoutTelemetry_serviceDesc.Streams[0], "/Nokia.SROS.DialoutTelemetry/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &dialoutTelemetryPublishClient{stream}
	return x, nil
}

type DialoutTelemetry_PublishClient interface {
	Send(*gnmi.SubscribeResponse) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type dialoutTelemetryPublishClient struct {
	grpc.ClientStream
}

func (x *dialoutTelemetryPublishClient) Send(m *gnmi.SubscribeResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dialoutTelemetryPublishClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DialoutTelemetryServer is the server API for DialoutTelemetry service.
type DialoutTelemetryServer interface {
	Publish(DialoutTelemetry_PublishServer) error
}

// UnimplementedDialoutTelemetryServer can be embedded to have forward compatible implementations.
type UnimplementedDialoutTelemetryServer struct {
}

func (*UnimplementedDialoutTelemetryServer) Publish(DialoutTelemetry_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterDialoutTelemetryServer(s *grpc.Server, srv DialoutTelemetryServer) {
	s.RegisterService(&_DialoutTelemetry_serviceDesc, srv)
}

func _DialoutTelemetry_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DialoutTelemetryServer).Publish(&dialoutTelemetryPublishServer{stream})
}

type DialoutTelemetry_PublishServer interface {
	Send(*PublishResponse) error
	Recv() (*gnmi.SubscribeResponse, error)
	grpc.ServerStream
}

type dialoutTelemetryPublishServer struct {
	grpc.ServerStream
}

func (x *dialoutTelemetryPublishServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dialoutTelemetryPublishServer) Recv() (*gnmi.SubscribeResponse, error) {
	m := new(gnmi.SubscribeResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DialoutTelemetry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Nokia.SROS.DialoutTelemetry",
	HandlerType: (*DialoutTelemetryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _DialoutTelemetry_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "NOKIA-dial-out-telemetry.proto",
}
